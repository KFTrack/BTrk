#include "VavRan.h"
#include "TMath.h"

#include <algorithm>

using namespace std;

//#define NULL 0

VavRan* VavRan::m_pInstance = NULL;  


float VavRan::fninv[5] = { 1.0000000000, .5000000000, .33333333, .2500000000,
  .2000000000 };
float VavRan::u8[13]   = { 21.487518, -11.825253, 4.3133087, -1.4500543,
  -3.4343169, -1.1063164, -.21000819, 1.7891643,
  -.89601916, .39120793,.73410606,0.0000000000,-.32454506 };
float VavRan::v1[12]   = { .27827257, -.0014227603, .0024848327, 0.0000000000,
  .045091424, .0080559636, -.0038974523, 0.0000000000,
  -.0030634124, 7.5633702e-4, .0054730726, .0019792507 };
float VavRan::v2[12]   = { .41421789, -.030061649, .0052249697, 0.0000000000,
  .12693873, .022999801, -.0086792801, .031875584,
  -.0061757928, 0.0000000000,.019716857, .0032596742 };
float VavRan::v3[13]   = { .20191056, -.046831422, .0096777473, -.0017995317,
  .053921588, .003506874, -.012621494, -.0054996531,
  -.0090029985, .0034958743, .018513506, .0068332334,
  -.0012940502 };
float VavRan::v4[12]   = { 1.3206081, .10036618, -.022015201, .0061667091,
  -.14986093, -.012720568, .024972042, -.0097751962,
  .026087455, -.011399062, -.048282515, -.0098552378 };
float VavRan::v5[13]   = { .016435243, .0360514, .002303652, -6.1666343e-4,
  -.010775802, .0051476061, .0056856517, -.013438433,
  0.0000000000, 0.0000000000, -.0025421507, .0020169108,
  -.0015144931 };
float VavRan::v6[13]   = { .033432405, .0060583916, -.0023381379, 8.3846081e-4,
  -.013346861, -.0017402116, .0021052496, .0015528195,
  .002190067, -.0013202847, -.0045124157, -.0015629454,
  2.2499176e-4 };
float VavRan::v7[11]   = { 5.4529572, -.90906096, .086122438, 0.0000000000,
  -1.2218009, -.3232412, -.027373591, .12173464,
  0.0000000000, 0.0000000000, .040917471 };
float VavRan::v8[11]   = { 9.3841352, -1.6276904, .16571423, 0.0000000000,
  -1.8160479, -.50919193, -.051384654, .21413992,
  0.0000000000, 0.0000000000, .066596366 };
float VavRan::w1[13]   = { .29712951, .0097572934, 0.0000000000, -.0015291686,
  .035707399, .0096221631, -.0018402821, -.0049821585,
  .0018831112, .0043541673, .0020301312, -.0018723311,
  -7.3403108e-4 };
float VavRan::edgec[6] = { .16666667, .041666667, .0083333333, .013888889,
  .0069444444, 7.7160493e-4 };
float VavRan::w2[11]   = { .40882635, .014474912, .0025023704, -.0037707379,
  .18719727, .056954987, 0.0000000000, .023020158,
  .0050574313, .009455014, .019300232 };
float VavRan::w3[13]   = { .16861629, 0.0000000000, .0036317285, -.0043657818,
  .030144338, .013891826, -.0058030495, -.0038717547,
  .0085359607, .014507659, .0082387775, -.010116105,
  -.005513567 };
float VavRan::w4[13]   = { 1.3493891, -.0026863185, -.003521604, .024434909,
  -.083447911, -.04806136, .0076473951, .02449443,
  -.0162092, -.037768479, -.047890063, .017778596,
  .013179324 };
float VavRan::w5[13]   = { .10264945, .032738857, 0.0000000000, .0043608779,
  -.043097757, -.0022647176, .009453129, -.012442571,
  -.0032283517, -.0075640352, -.0088293329, .0052537299,
  .0013340546 };
float VavRan::w6[13]   = { .029568177, -.001630006, -2.1119745e-4, .0023599053,
  -.0048515387, -.0040797531, 4.0403265e-4, .0018200105,
  -.0014346306, -.0039165276, -.0037432073, .001995038,
  .0012222675 };
float VavRan::w8[8]    = { 6.6184645, -.73866379, .044693973, 0.0000000000,
  -1.4540925, -.39529833, -.044293243, .088741049 };
float VavRan::u1[13]   = { .25850868, .032477982, -.0059020496, 0.0000000000,
  .024880692, .0047404356, -7.444513e-4, .0073225731,
  0.0000000000, .0011668284, 0.0000000000, -.0015727318,
  -.0011210142 };
float VavRan::u2[13]   = { .43142611, .040797543, -.0091490215, 0.0000000000,
  .042127077, .0073167928, -.0014026047, .016195241,
  .0024714789, .0020751278, 0.0000000000, -.0025141668,
  -.0014064022 };
float VavRan::u3[13]   = { .25225955, .064820468, -.023615759, 0.0000000000,
  .023834176, .0021624675, -.0026865597, -.0054891384,
  .0039800522, .0048447456, -.0089439554, -.0062756944,
  -.0024655436 };
float VavRan::u4[12]   = { 1.2593231, -.20374501, .095055662, -.020771531,
  -.04686518, -.0077222986, .0032241039, .008988292,
  -.0067167236, -.013049241, .018786468, .014484097 };
float VavRan::u5[13]   = { -.024864376, -.0010368495, .0014330117, 2.005273e-4,
  .0018751903, .0012668869, 4.8736023e-4, .0034850854,
  0.0000000000, -3.6597173e-4, .0019372124, 7.0761825e-4,
  4.6898375e-4 };
float VavRan::u6[13]   = { .035855696, -.027542114, .012631023, -.0030188807,
  -8.4479939e-4, 0.0000000000, 4.5675843e-4, -.0069836141,
  .0039876546, -.0036055679, 0.0000000000, .0015298434,
  .0019247256 };
float VavRan::u7[8]    = { 10.234691, -3.5619655, .69387764, -.14047599,
  -1.995239, -.45679694, 0.0000000000, .50505298 };

VavRan::VavRan(){

}

VavRan* VavRan::Instance()
{
  if (!m_pInstance)
    m_pInstance = new VavRan;

  return m_pInstance;
}


float VavRan::gen (float rkappa, float beta2, float ran){
  v = (float)0.;
  if (rkappa < (float).01 || rkappa > (float)12.) {
  //goto L9;
    ret_val = v;
    return ret_val;
  }
  if (rkappa >= (float).29) {
    itype = 1;
    npt = 100;
    wk = 1 / sqrt(rkappa);
    ac[0] = (beta2 * (float)-.032227 - (float).074275) * rkappa + (
      beta2 * (float).24533 + (float).070152) * wk + (beta2 * (
      float)-.5561 - (float)3.1579);
    ac[8] = (beta2 * (float)-.013483 - (float).048801) * rkappa + (
      beta2 * (float)-1.6921 + (float)8.3656) * wk + (beta2 * (
      float)-.73275 - (float)3.5226);
      /* Computing 2nd power */
    r__1 = wk;
    drk[0] = r__1 * r__1;
    dsigm[0] = sqrt(rkappa / (1 - beta2 * (float).5));
    for (j = 1; j <= 4; ++j) {
      drk[j] = drk[0] * drk[j - 1];
      dsigm[j] = dsigm[0] * dsigm[j - 1];

      alfa[j - 1] = (fninv[j - 1] - beta2 * fninv[j]) * drk[j - 1];
    }
    hc[0] = log(rkappa) + beta2 + (float).42278434;
    hc[1] = dsigm[0];
    hc[2] = alfa[1] * dsigm[2];
    /* Computing 2nd power */
    r__1 = alfa[0];
    hc[3] = (r__1 * r__1 * 3 + alfa[2]) * dsigm[3] - 3;
    hc[4] = (alfa[0] * 10 * alfa[1] + alfa[3]) * dsigm[4] - hc[2] * 10;
    /* Computing 2nd power */
    r__1 = hc[2];
    hc[5] = r__1 * r__1;
    hc[6] = hc[2] * hc[3];
    hc[7] = hc[2] * hc[5];
    for (j = 2; j <= 7; ++j) {

      hc[j] = edgec[j - 2] * hc[j];
    }
    hc[8] = hc[1] * (float).39894228;
  } else if (rkappa >= (float).22) {
    itype = 2;
    npt = 150;
    x = (rkappa - (float).3) * (float)25.000000000000004 + 1;
    y = (sqrt(beta2) - (float)1.) * (float)2.1052631578947367 + 1;
    xx = x * 2;
    yy = y * 2;
    x2 = xx * x - 1;
    x3 = xx * x2 - x;
    y2 = yy * y - 1;
    y3 = yy * y2 - y;
    xy = x * y;
    p2 = x2 * y;
    p3 = x3 * y;
    q2 = y2 * x;
    q3 = y3 * x;
    pq = x2 * y2;
    ac[1] = w1[0] + w1[1] * x + w1[3] * x3 + w1[4] * y + w1[5] * y2 + w1[
      6] * y3 + w1[7] * xy + w1[8] * p2 + w1[9] * p3 + w1[10] * q2 
      + w1[11] * q3 + w1[12] * pq;
    ac[2] = w2[0] + w2[1] * x + w2[2] * x2 + w2[3] * x3 + w2[4] * y + w2[
      5] * y2 + w2[7] * xy + w2[8] * p2 + w2[9] * p3 + w2[10] * q2;
    ac[3] = w3[0] + w3[2] * x2 + w3[3] * x3 + w3[4] * y + w3[5] * y2 + w3[
      6] * y3 + w3[7] * xy + w3[8] * p2 + w3[9] * p3 + w3[10] * q2 
      + w3[11] * q3 + w3[12] * pq;
    ac[4] = w4[0] + w4[1] * x + w4[2] * x2 + w4[3] * x3 + w4[4] * y + w4[
      5] * y2 + w4[6] * y3 + w4[7] * xy + w4[8] * p2 + w4[9] * p3 + 
      w4[10] * q2 + w4[11] * q3 + w4[12] * pq;
    ac[5] = w5[0] + w5[1] * x + w5[3] * x3 + w5[4] * y + w5[5] * y2 + w5[
      6] * y3 + w5[7] * xy + w5[8] * p2 + w5[9] * p3 + w5[10] * q2 
      + w5[11] * q3 + w5[12] * pq;
    ac[6] = w6[0] + w6[1] * x + w6[2] * x2 + w6[3] * x3 + w6[4] * y + w6[
      5] * y2 + w6[6] * y3 + w6[7] * xy + w6[8] * p2 + w6[9] * p3 + 
      w6[10] * q2 + w6[11] * q3 + w6[12] * pq;
    ac[8] = w8[0] + w8[1] * x + w8[2] * x2 + w8[4] * y + w8[5] * y2 + w8[
      6] * y3 + w8[7] * xy;
    ac[0] = (float)-3.05;
  } else if (rkappa >= (float).12) {
    itype = 3;
    npt = 200;
    x = (rkappa - (float).2) * (float)24.999999999999996 + 1;
    y = (sqrt(beta2) - (float)1.) * (float)2.1052631578947367 + 1;
    xx = x * 2;
    yy = y * 2;
    x2 = xx * x - 1;
    x3 = xx * x2 - x;
    y2 = yy * y - 1;
    y3 = yy * y2 - y;
    xy = x * y;
    p2 = x2 * y;
    p3 = x3 * y;
    q2 = y2 * x;
    q3 = y3 * x;
    pq = x2 * y2;
    ac[1] = v1[0] + v1[1] * x + v1[2] * x2 + v1[4] * y + v1[5] * y2 + v1[
      6] * y3 + v1[8] * p2 + v1[9] * p3 + v1[10] * q2 + v1[11] * q3;
    ac[2] = v2[0] + v2[1] * x + v2[2] * x2 + v2[4] * y + v2[5] * y2 + v2[
      6] * y3 + v2[7] * xy + v2[8] * p2 + v2[10] * q2 + v2[11] * q3;
    ac[3] = v3[0] + v3[1] * x + v3[2] * x2 + v3[3] * x3 + v3[4] * y + v3[
      5] * y2 + v3[6] * y3 + v3[7] * xy + v3[8] * p2 + v3[9] * p3 + 
      v3[10] * q2 + v3[11] * q3 + v3[12] * pq;
    ac[4] = v4[0] + v4[1] * x + v4[2] * x2 + v4[3] * x3 + v4[4] * y + v4[
      5] * y2 + v4[6] * y3 + v4[7] * xy + v4[8] * p2 + v4[9] * p3 + 
      v4[10] * q2 + v4[11] * q3;
    ac[5] = v5[0] + v5[1] * x + v5[2] * x2 + v5[3] * x3 + v5[4] * y + v5[
      5] * y2 + v5[6] * y3 + v5[7] * xy + v5[10] * q2 + v5[11] * q3 
      + v5[12] * pq;
    ac[6] = v6[0] + v6[1] * x + v6[2] * x2 + v6[3] * x3 + v6[4] * y + v6[
      5] * y2 + v6[6] * y3 + v6[7] * xy + v6[8] * p2 + v6[9] * p3 + 
      v6[10] * q2 + v6[11] * q3 + v6[12] * pq;
    ac[7] = v7[0] + v7[1] * x + v7[2] * x2 + v7[4] * y + v7[5] * y2 + v7[
      6] * y3 + v7[7] * xy + v7[10] * q2;
    ac[8] = v8[0] + v8[1] * x + v8[2] * x2 + v8[4] * y + v8[5] * y2 + v8[
      6] * y3 + v8[7] * xy + v8[10] * q2;
    ac[0] = (float)-3.04;
  } else {
    itype = 4;
    if (rkappa >= (float).02) {
      itype = 3;
    }
    npt = 200;
    x = (rkappa - (float).1) * (float)25. + 1;
    y = (sqrt(beta2) - (float)1.) * (float)2.1052631578947367 + 1;
    xx = x * 2;
    yy = y * 2;
    x2 = xx * x - 1;
    x3 = xx * x2 - x;
    y2 = yy * y - 1;
    y3 = yy * y2 - y;
    xy = x * y;
    p2 = x2 * y;
    p3 = x3 * y;
    q2 = y2 * x;
    q3 = y3 * x;
    pq = x2 * y2;
    if (itype == 3) {
      ac[1] = u1[0] + u1[1] * x + u1[2] * x2 + u1[4] * y + u1[5] * y2 + 
        u1[6] * y3 + u1[7] * xy + u1[9] * p3 + u1[11] * q3 + u1[
        12] * pq;
      ac[2] = u2[0] + u2[1] * x + u2[2] * x2 + u2[4] * y + u2[5] * y2 + 
        u2[6] * y3 + u2[7] * xy + u2[8] * p2 + u2[9] * p3 + u2[11]
        * q3 + u2[12] * pq;
      ac[3] = u3[0] + u3[1] * x + u3[2] * x2 + u3[4] * y + u3[5] * y2 + 
        u3[6] * y3 + u3[7] * xy + u3[8] * p2 + u3[9] * p3 + u3[10]
        * q2 + u3[11] * q3 + u3[12] * pq;
      ac[4] = u4[0] + u4[1] * x + u4[2] * x2 + u4[3] * x3 + u4[4] * y + 
        u4[5] * y2 + u4[6] * y3 + u4[7] * xy + u4[8] * p2 + u4[9] 
        * p3 + u4[10] * q2 + u4[11] * q3;
      ac[5] = u5[0] + u5[1] * x + u5[2] * x2 + u5[3] * x3 + u5[4] * y + 
        u5[5] * y2 + u5[6] * y3 + u5[7] * xy + u5[9] * p3 + u5[10]
        * q2 + u5[11] * q3 + u5[12] * pq;
      ac[6] = u6[0] + u6[1] * x + u6[2] * x2 + u6[3] * x3 + u6[4] * y + 
        u6[6] * y3 + u6[7] * xy + u6[8] * p2 + u6[9] * p3 + u6[11]
        * q3 + u6[12] * pq;
      ac[7] = u7[0] + u7[1] * x + u7[2] * x2 + u7[3] * x3 + u7[4] * y + 
        u7[5] * y2 + u7[7] * xy;
    }
    ac[8] = u8[0] + u8[1] * x + u8[2] * x2 + u8[3] * x3 + u8[4] * y + u8[
      5] * y2 + u8[6] * y3 + u8[7] * xy + u8[8] * p2 + u8[9] * p3 + 
      u8[10] * q2 + u8[12] * pq;
    ac[0] = (float)-3.03;
  }
  ac[9] = (ac[8] - ac[0]) / npt;
  if (itype == 3) {
    x = (ac[7] - ac[8]) / (ac[7] * ac[8]);
    y = 1 / log(ac[8] / ac[7]);
    /* Computing 2nd power */
    r__1 = ac[7];
    p2 = r__1 * r__1;
    ac[11] = p2 * (ac[1] * exp(-ac[2] * (ac[7] + ac[5] * p2) - ac[3] * 
      exp(-ac[4] * (ac[7] + ac[6] * p2))) - y * (float).045 / ac[7])
      / (x * y * ac[7] + 1);
    ac[12] = (x * ac[11] + (float).045) * y;
  }
  if (itype == 4) {
    ac[10] = (float).995 / TMath::LandauI(ac[8]);
  }
  t = ran * 2 / ac[9];
  rlam = ac[0];
  fl = (float)0.;
  s = (float)0.;
  i__1 = npt;
  for (n = 1; n <= i__1; ++n) {
    rlam += ac[9];
    if (itype == 1) {
      fn = (float)1.;
      x = (rlam + hc[0]) * hc[1];
      h__[0] = x;
      /* Computing 2nd power */
      r__1 = x;
      h__[1] = r__1 * r__1 - 1;
      for (k = 2; k <= 8; ++k) {
        fn += 1;

        h__[k] = x * h__[k - 1] - fn * h__[k - 2];
      }
      y = hc[7] * h__[8] + 1;
      for (k = 2; k <= 6; ++k) {

        y += hc[k] * h__[k];
      }
      /* Computing 2nd power */
      r__1 = x;
      fu = hc[8] * exp(r__1 * r__1 * (float)-.5) * max(y,(float)0.);
    } else if (itype == 2) {
    /* Computing 2nd power */
      r__1 = rlam;
      x = r__1 * r__1;
      fu = ac[1] * exp(-ac[2] * (rlam + ac[5] * x) - ac[3] * exp(-ac[4] 
        * (rlam + ac[6] * x)));
    } else if (itype == 3) {
      if (rlam < ac[7]) {
      /* Computing 2nd power */
        r__1 = rlam;
        x = r__1 * r__1;
        fu = ac[1] * exp(-ac[2] * (rlam + ac[5] * x) - ac[3] * exp(
          -ac[4] * (rlam + ac[6] * x)));
      } else {
        x = 1 / rlam;
        fu = (ac[11] * x + ac[12]) * x;
      }
    } else {
      fu = ac[10] * TMath::Landau(rlam);
    }
    s = s + fl + fu;
    if (s > t) {

      break;
      /*
      s0 = s - fl - fu;
      v = rlam - ac[9];
      if (s > s0) {
      v += ac[9] * (t - s0) / (s - s0);
      }
      ret_val = v;
      return ret_val;
      */

    }

    fl = fu;
  }

  s0 = s - fl - fu;
  v = rlam - ac[9];
  if (s > s0) {
    v += ac[9] * (t - s0) / (s - s0);
  }

  ret_val = v;
  return ret_val;

}
