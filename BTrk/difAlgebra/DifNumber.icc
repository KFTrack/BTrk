//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id: DifNumber.icc,v 1.36 2008/03/19 19:51:43 brownd Exp $
//
// Description:
//	Class Implementation for |DifNumber| 
//      Inline implementation for numbers with derivatives
// Environment:
//	Software developed for the BaBar Detector at the SLAC B-Factory.
//
// Author List:
//	A. Snyder
//
// Copyright Information:
//	Copyright (C) 1996	SLAC
//
//------------------------------------------------------------------------

#include "BTrk/difAlgebra/DifIndepPar.hh"
#include "BTrk/difAlgebra/DifNumber.hh"
#include "BTrk/difAlgebra/Code.hh"


/* Suns do not have IEEE drem. */
/* But they have remainder (x,y) which is  ANSI/IEEE Std 754-1985 compliant */
#ifdef SUNCC
#define drem( _A , _B ) remainder( _A , _B )
#endif

inline DifNumber::DifNumber()
  :_number(0.0),
   _npar(0),
   _indepPar(0)
{//zeroDerivatives();
} 
inline DifNumber::DifNumber(double s,int npar)
  :_number(s),
   _npar(npar),
   _indepPar(0)
{zeroDerivatives();}
inline DifNumber::DifNumber(double s,const CLHEP::HepVector& d)
  :_number(s),
   _npar(d.num_row()),
   _indepPar(0)
{copyDerivs(d);}
inline DifNumber::DifNumber(double s,int i,double di,int npar)
  :_number(s),
   _npar(npar),
   _indepPar(0)
{
  assert(i>0); 
  assert(i<=nPar());
  zeroDerivatives();
  setDerivative(i,di);
}
inline DifNumber::DifNumber(double s,int i,int npar)
  :_number(s),
   _npar(npar),
   _indepPar(0)
{
  assert(i>0);
  assert(i<=nPar());
  zeroDerivatives();
  setDerivative(i,1.0);
}

inline DifNumber::DifNumber(double s,const DifIndepPar* indeppar)
  :_number(s),
   _npar(indeppar->nPar()),
   _indepPar(indeppar)
{zeroDerivatives();}

inline DifNumber::DifNumber(double s,int i,const DifIndepPar* indepar)
  :_number(s),
   _npar(indepar->nPar()),
   _indepPar(indepar)
{
  zeroDerivatives();
  setDerivative(i,1.0);
}

inline DifNumber::DifNumber(double newval,const DifNumber& from,double factor)
  :_number(newval),
   _npar(from.nPar()),
   _indepPar(from.indepPar())
{scaleDerivs(from,factor);}

inline DifNumber::DifNumber(const DifNumber& s)
  :_number(s.number()),
   _npar(s.nPar()),
   _indepPar(s.indepPar())
{copyDerivs(s);}



inline DifNumber& DifNumber::setLike(const DifNumber& a){
  setNPar(a.nPar());
  setIndepPar(a.indepPar());
//  zeroDerivatives();
  return *this;
}

inline bool operator==(const DifNumber& a,const DifNumber& b){
  if(a.indepPar()!=a.indepPar()) return false;
  if(a.nPar()!=b.nPar()) return false;
  if(a.number()!=b.number()) return false;
  for(int i=1; i<a.nPar(); i++) {
    if(a.derivative(i)!=b.derivative(i)) return false;
  }
  return true;
}

inline void DifNumber::cosAndSin(DifNumber& c,DifNumber& s)const{
  double nc=cos(number()); c.setLike(*this); c.setNumber(nc);
  double ns=sin(number()); s.setLike(*this); s.setNumber(ns);
  for(int i=1; i<=nPar(); i++){
    c.setDerivative(i,-ns*derivative(i));
    s.setDerivative(i,nc*derivative(i));
  }
}

inline DifNumber asin(const DifNumber& a) {
  double sangle=a.number();
  return DifNumber(asin(sangle),a,1.0/sqrt(1-sangle*sangle));
}

inline DifNumber acos(const DifNumber& a) {
  double cangle=a.number();
  return DifNumber(acos(cangle),a,-1.0/sqrt(1.0-cangle*cangle));
}
 
inline DifNumber atan(const DifNumber& a) {
  double tangle=a.number();
  return DifNumber(atan(tangle),a,1.0/(1.0+tangle*tangle));
}


DifNumber& DifNumber::operator+=(const DifNumber & a) {
  check(a);
  _number+=a.number();
  if(a.nPar()==0) return *this;
  if(nPar()) {
    for(int i=0; i<nPar(); i++) {_derivatives[i]+=a.derivative(i+1);}
  }else{
    setLike(a);
    for(int i=1; i<=nPar(); i++) {setDerivative(i,a.derivative(i));}
  }
  return *this;
}

DifNumber& DifNumber::operator+=(const double& a) {
  _number+=a;
  return *this;
}
DifNumber& DifNumber::operator-=(const double& a) {
  _number-=a;
  return *this;
}
DifNumber& DifNumber::operator*=(const double& a) {
  *this*=DifNumber(a);
  return *this;
}
DifNumber& DifNumber::operator/=(const double& a) {
  *this/=DifNumber(a);
  return *this;
}
DifNumber& DifNumber::operator=(const double& a) {
  *this=DifNumber(a);
  return *this;
}


DifNumber& DifNumber::operator-=(const DifNumber& a){
  check(a);
  _number-=a.number();
  if(!a.nPar()) {return *this;}
  if(nPar()){
    for(int i=0; i<nPar(); i++) {_derivatives[i]-=a.derivative(i+1);}
  }else{
    setLike(a);
    for(int i=1; i<=nPar(); i++) {setDerivative(i,-a.derivative(i));}
  }
  return *this;
}

DifNumber& DifNumber::operator*=(const DifNumber& a) {
  check(a);
  double n=number();
  double na=a.number();
  _number*=na;
  if(!a.nPar()) { 
    for(int i=0; i<nPar(); i++) {_derivatives[i]*=na;}
  }else if(nPar()) {
    for(int i=0; i<nPar(); i++) {
      _derivatives[i]*=na;
      _derivatives[i]+=n*a.derivative(i+1);
    }
  }else {
    setLike(a);
    for(int i=1; i<=nPar(); i++) {setDerivative(i,n*a.derivative(i));}
  }
  return *this;
}

DifNumber& DifNumber::operator/=(const DifNumber& a) {
  double n=number();
  double na=a.number();
  _number/=na;
  if(!a.nPar()) {
    for(int i=0; i<nPar(); i++) {_derivatives[i]/=na;}
  }else if(nPar()){
    for(int i=0; i<nPar(); i++) {
      _derivatives[i]-=number()*a.derivative(i+1);
      _derivatives[i]/=na;
    }
  }else{
    setLike(a);
    for(int i=1; i<=nPar(); i++) {setDerivative(i,-a.derivative(i)*n/(na*na));}
  }
  return *this;
}

DifNumber& DifNumber::operator=(const DifNumber& a) {
  _number=a._number;
  setLike(a);
  for(int i=0; i<nPar(); i++) {_derivatives[i]=a.derivative(i+1);}
  return *this;
}

inline DifNumber& DifNumber::inverse() {
  _number=1.0/_number;
  double r=-_number*_number;
  for(int i=0; i< nPar(); i++) _derivatives[i]=r*derivative(i+1);
  return *this;
}

inline DifNumber& DifNumber::squareRoot(){
  _number=sqrt(_number);
  assert(_number!=0.0);
  for(int i=0; i<nPar(); i++) _derivatives[i]*=0.5/_number;
  return *this;
}

inline 
DifNumber& DifNumber::flipsign() {
  _number=-_number;
  for(int i=0; i<nPar(); i++) _derivatives[i]=-_derivatives[i];
  return *this;
}	


inline DifNumber& DifNumber::mod(double lo,double hi){
  assert(hi>lo);
  double delta=hi-lo;
//  while(_number>=hi) {_number-=delta;}
//  while(_number<lo) {_number+=delta;}
  double avg=0.5*(hi+lo);
// drem modulo function drem(x,y)=x - n * y, , where n is the  quotient
// of x / y, rounded to the nearest integer.  This gives an answer in the
// range of -y/2 to y/2.  We center the region about the origin and then
// shift it back.
// Warning: fmod(x,y) will not work.
  _number=drem(_number-avg,delta)+avg;
  return *this;
}

inline DifNumber& 
DifNumber::arcTangent(const DifNumber& x){
  check(x);
  double yn=number();
  double xn=x.number();
  double rn2=xn*xn+yn*yn;
  setNumber(atan2(yn,xn));
  if(!x.nPar()){
    for(int i=0; i<nPar(); i++){_derivatives[i]*=xn/rn2;}
  }else if(nPar()){
    for(int i=0; i<nPar(); i++) {
      _derivatives[i]*=xn/rn2;
      _derivatives[i]-=x.derivative(i+1)*yn/rn2;
    }
  }else{
    setLike(x);
    for(int i=1; i<=nPar(); i++) {setDerivative(i,-x.derivative(i)*yn/rn2);}
  }
  return *this;
}

inline DifNumber& 
DifNumber::power(double y){
  double xn=number();
  double f=pow(xn,y);
  setNumber(f);
  for(int i=0; i<nPar(); i++) {_derivatives[i]*=y*f/xn;}
  return *this;

}

inline DifNumber&
DifNumber::power(const DifNumber& y){
  check(y);
  if(y.nPar()==0) return power(y.number());

  double yn=y.number();
  double xn=number();
  double f=pow(xn,yn);
  setNumber(f);

  double lgxn=log(xn);

  if(nPar()!=0){		// x has derivatives too?
    for(int i=0; i<nPar(); i++){
      _derivatives[i]*=yn*f/xn;
      _derivatives[i]+=f*lgxn*y.derivative(i+1);
    }
  }else {			// only y has derivatives
    setLike(y);
    zeroDerivatives();
    if(xn>0.0) {
      for(int i=1; i<=nPar(); i++) {setDerivative(i,f*lgxn*y.derivative(i));}
    }	// (xn>0.0)
  } //(nPar()!=0) 


  return *this;
} // end of |power|

inline void DifNumber::sumMatrix(CLHEP::HepMatrix& a)const {
  assert(a.num_col()==nPar());
  assert(a.num_row()==nPar());
  for(int i=1; i<=nPar(); i++){
    for(int j=1; j<=nPar(); j++) {
      a(i,j)+=derivative(i)*derivative(j);
    }
  }
}

inline DifNumber& DifNumber::copyDerivs(const CLHEP::HepVector& from) {
  assert(from.num_row()==nPar());
  for(int i=1; i<=nPar(); i++) setDerivative(i,from(i));
  return *this;
}

inline DifNumber& DifNumber::copyDerivs(const DifNumber& n){
  assert(nPar()==n.nPar());
  for(int i=1; i<=nPar(); i++) setDerivative(i,n.derivative(i));
  return *this;
}

inline DifNumber& DifNumber::scaleDerivs(const DifNumber& n,double factor){
  assert(nPar()==n.nPar());
  for(int i=1; i<=nPar(); i++) setDerivative(i,factor*n.derivative(i));
  return *this;
}

inline DifNumber& DifNumber::check(const DifNumber& a) {
  assert((indepPar()==a.indepPar())||indepPar()==0||a.indepPar()==0);
  assert((nPar()==a.nPar())||nPar()==0||a.nPar()==0);
  return *this;
}

inline void DifNumber::extendPar(int nnew){
  if(nnew<=nPar()) return;
  for(int i=nPar(); i<nnew; i++) _derivatives[i]=0;
  _npar=nnew;

}
