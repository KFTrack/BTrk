Package: difAlgebra - implements first order differential algebra.

Note: this document is historical in nature; you may in some cases
need to read to the end to get the current status of things.

Sun Jun  2 16:30:21 PDT 1996

This package as an implementation of differential
algebra - the algebra of numbers and their derivatives.

Basics:
------

A differential number is a number and its derivatives [a] with
respect to some set of parameters. In principle the derivatives
can be carried to any order, but for our purposes (HEP) only
one or two orders are of interest. The current implementation
is taken only to first order which is good enough for 
error propagation and fitting.

A differential number looks as follows:

(x,x')

where |x| is the value and |x'| is an array of derivatives. 
Every thing you can do with a number you can do with
a differential number:

addition:

(x,x')+(y,y')=(x+y,x'+y')

multiplication:

(x,x')*(y,y')=(x*y,x*y'+x'*y)

division:

(x,x')/(y,y')=(x/y,x'/y-x*y'/y**2)

From which differential algebra equivalents can
be derived for all the usual functions.

A few examples:

sin[(x,x')]=(sin[x],x'*cos[x])

log[(x,x')]=(log[x],x'/x)

atan[(x,x')]=(atan[x],x'/(1.0+x**2));

Classes:
--------


|DifNumber| is a class that represents differential numbers.
Most of the familiar functions have been implemented, but
a few less commonly used ones (|atanh|, e.g.) are not yet
available. Some things (like |floor|) probably make no
sense for differential numbers.

The number of parameters for which derivatives are carried is
given my the static parameter |_npar| which can be set
with the |setNPar| function. Differential numbers with
different numbers of parameters don't make sense and
are not allowed.

|DifVector|, |DifPoint| and |DifRotation| are derived from
|DifNumber| simply by using |DifNumber|s in place of
ordinary doubles or floats.

The *Pit Fall* of differential numbers:
--------------------------------------

DON'T FORGET THE DERIVATIVES ARE THERE.

For example when rotating vector V around axis A one might
to decide to do nothing when V is parallel to A, this 
would be wrong because the derivatives will not in
general be parallel to A. Similarly two sets of 
non-commuting rotations that bring a vector to the 
same "place" will not in general give the same derivatives.
Euler matters even for "simple" vectors.

Interaction with regular numbers:
---------------------------------

Interaction with regular numbers (doubles in this case) is
implemented by supplying a constructor form a single
number that creates a |DifNumber| with all derivatives set to
0. Auto casting rules then make all the usual operations 
work properly. This is certainly slow, and should be 
replaced, but seems to work. 


Summary of |DifNumber| functions.

constructors: 


DifNumber(); 
//creates 0 with derivatives all 0 too

DifNumber(double);
//creates number with value 0 and derivatives 0

DifNumber(double s,const HepVectorD& d);
//creates number with value and derivatives d

DifNumber(const DifNumber& s);
//copies one number to another

functions:

setNPar(int n); 
//set the static variable |_npar| that specifies number of
//derivatives being ferried about, i.e., then length of
//the vector of derivatives

setNumber(int n);
//set the value of differential number

setDerivatives(HepVectorD &d);
//set the derivatives of differential number

double number()const;
//returns the value of the number

HepVectorD derivatives()const;
//returns the vector of derivatives

int nPar()const;
//return the number of parameters

double error(const BbrError& e)const;
//given an error matrix e, computes the error on the number

double correlation
(const DifNumber& a,const DifNumber& b,const BbrError& e);
//given an error e, computes the correlation between |a| and
//|b|. When |a=b| this is the error squared.

Many of the functions in |math.h| have been implemented for
|DifNumber|s; too see what's available currently look in
|DifNumber.hh|

Operators:

+,-,*,/,=,+=,-=,- have been implemented.

Defaults of "==", etc. are probably ok, but have not been tested
yet.


Misc:

void inverse();
//takes the inverse of a |DifNumber|, i.e.,

a.inverse();

//inverts |a|.

void flipsign();
//flips sign of a |DifNumber|.

void cosAndSin(DifNumber& c,DifNumber& s);
//computes cosine and sine of the differential number

void.print(ostream&);
//prints a number; can also be invoked with "<<" operator.


Data Members:

double _number; 
//value of the number

HepVectorD _derivatives;
//array of derivatives

static int _npar;
//number of parameters for which derivatives are carried about


Mon Jun  3 14:32:43 PDT 1996

Additions:

Comparative operators added:

>,<,<=,>= compare only the value of the differential numbers; the
derivatives are ignored since meaning is not clear. Care must
be taken as in using if statements as described above, but these
operations are still needed on occasion, e.g., to avoid division by
zero.

For "==" and "!=" value and derivatives must be equal (or not) to
pass test.


Thu Jul 18 18:35:20 PDT 1996

|square| function (to square a number "in place") added.

Trajectory classes (|DifTrajectory|,|DifHelixZ|) set up
to inherit from each other. |DifRay| reduced to light weight
object that just contains a point and unit vector. |DifPocas| class
that encapsulates and calculates pocas and docas between trajectories
added. Note: |DifPocas| assumes user has gotten trajectories 
close enough that a iterated linear "fit" can be used to find
pocas.


Tue Sep  3 14:08:00 PDT 1996

|DifNumber| modified to allow variable number of active derivatives;
max number must be specified from beginning.

int _npar  - specifies number of active derivatives
int _npar0 - specifies number of active derivatives for new diff
             numbers. Note: this is true even when a "copy" is being
             made.
int _nmax  - maximum number of derivatives that can be accommodated.

External interface is via |HepVectorD| (i.e., |derivatives()| returns
a vector of |_npar| derivatives. At the movement derivatives are
also internal stored as a |HepVectorD| but this will be changed
to some sort of static array for the sake of speed .. hence the
need for a maximum number .

Thu Dec  5 09:25:03 PST 1996

New classes |DifArray| and |DifIndepPar| added. At this point-in-time
do not expect them to work. They are, respectively a simple array
class for differential numbers which will facilitate the construction
of transformation matrices and a container class for independent parameters
and their errors. They are NOT used yet, but are beginning of a
major redesign of |difAlgebra| to make it faster and easier to use.

Thu Dec  5 10:30:03 PST 1996 

Adding constructors from a |HepThreeVector| to |DifVector| and
|DifPoint|. Remove vestigial test code for |BbrError| from
|testDifAlgebra|.

Thu Jan  9 13:37:37 PST 1997

Major modifications that are NOT completely backwards compatible. Versions
with these changes will be tagged V00-02-xx. 

High lights of the changes:

o |DifNumber|s can now carry a pointer to a independent parameter class 
  (new class called |DifIndepPar|), that keeps track of the values 
  and errors on the independent parameters. Errors and correlations 
  will by default refer to errors in the independent parameter 
  class associated (pointed to by) a |DifNumber|. For backward 
  compatibility the option to use |DifNumber|s w/o a corresponding
  |DifIndepPar| object is retained as well as functions to calculate error
  and correlations from a specified error matrix.

o A simple array class (|DifArray|) for |DifNumber|s has been added. 
  It is used by |DifIndepPar| to store the values of the independent
  parameters. In near further it will have a function to return the
  transformation matrix between the numbers in the array and the
  independent parameters they depend on.

o Number of parameters for which derivatives are maintained is no longer
  specified by a default value (|npar0|), but must specified in the
  construction either directly as an integer or indirectly via a 
  pointer to the new |DifIndepPar| class. 

o Current programs that use |DifNumber|s w/o pointing to independent
  parameter class must be modified to specify the number independent
  parameters in some of their constructors.

o A simple c-array has replaced |HepVectorD| has derivative container;
  my (AES) fitter code runs about 4x faster with this version.


Comments(AES):

|DifIndepPar| accept for keeping the parameters as differential numbers 
is very similar concept to conventional vector with errors. The reason
i've made it a new class is that i think it convenient and, perhaps,
wise to keep the independent parameters in one place rather than
having to keep a differential and ordinary sets in sync.


o start on none const magnetic field version of fitter ..


Wed Feb  5 10:30:34 PST 1997

o New trajectory class |DifTrkInField| to represent a track moving
  through a non-uniform magnetic field has been added.

Wed Jul 23 14:23:27 PDT 1997

o Removed "D" from end of CLHEP classes |HepVector| and |HepMatrix|. This
  is a trivial change that should have no effect on anyone.

Wed Aug 20 13:19:18 PDT 1997

o Add constructor to |DifTrajectory| from a babar standard trajectory, 
  i.e., as in |TrkBase/Trajectory.hh|.

Wed Sep  3 14:11:26 PDT 1997

o Added |jacobian| function to |DifArray| and |DifVector| to return
  array of derivatives. |DifPoint| will inherit |jacobian| from |DifVector|.

o Modified step size calculation in |DifTrkInField| to scale step size
  with inverse curvature and to force |_direction| to remain a unit vector.

Fri Oct  3 16:26:36 PDT 1997

o split into basic differential number package (retains name |difAlgebra|) 
  and package of trajectory class to be called |difTraj|


Fri Oct 17 09:11:20 PDT 1997

o Add new class |DifComplex| which is a differential complex number.
  Useful, e.g., in calculating rates and their derivatives from
  amplitudes.

Wed Dec 24 11:56:14 PST 1997

Summary of classes:

Class              Comment
-----              -------

DifArray           Simple array of differential numbers
DifComplex         A complex differential number
DifIndepPar        Container for set of independent parameters
DifNumber          Differential numbers
DifPoint           A differential point
DifRotation        Rotate differential vectors/points
DifVector          A differential vector
DifFourVector      A four vector class, including boost, etc.


see |difFunction/| for differential function classes.

see |difTrajectory/| for differential trajectories classes.cd


Sun Feb  8 10:16:04 EST 1998

o Modified DifNumber.icc to prevent hangs when the function DifNumber::mod
  is misused.  This seems to require the use of the IEEE standard routine
  drem(x,y) which is not found on Suns.  For Suns we have defined drem in
  terms of the sunmath routine anint(x).  anint(x) is Sun specific.

Fri May  1 10:34:33 PDT 1998

o new "reverse polish" function |squareRoot()| added to take
  square root of number in place.

Wed Jul  1 11:10:46 PDT 1998

o Replace |BbrPoint| with |HepPoint|

o Replace function |bbrPoint| with function |hepPoint|

Warning: anybody using |bbrPoint()| will have to change to
|hepPoint()|.

Tue May  2 13:59:57 PDT 2000

o Fix bug to function sin(const DifComplex&) in DifComplex.cc. The I
was missing causing the function to produce result I*sin instead of sin.

Fri Sep 17 12:28:02 PDT 2004

o Making |DifNumber| from |double| constructor 'explicit' so as to avoid conflists 
functions like |pow|. 

o Construction of the type 'DifNumber aDifNumber=aDouble' will no longer work;
they should be replaced with either 'DifNumber aDifNumber=DifNumber(aDouble)' or
with just 'DifNumber aDifNumber(aDouble)'.

Tue Oct 5 15:14 PDT 2004 -- M. Kelsey

- Updated link_*.mk and bin_*.mk files to remove incorrect dependencies.

Thu Jan 14 2010 - R. Stroili

- split code in src and include directories

___________________________________________________________

[a] Properly speaking a differential number is the value of
a function and its derivatives for a fixed values of the
independant parameters. When the independent parameters 
change, all |DifNumber|s derived from them must be recalculated.
