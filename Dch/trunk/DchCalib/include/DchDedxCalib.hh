//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id: DchDedxCalib.hh 88 2010-01-14 12:32:57Z stroili $
//
// Description:
//	Class DchDedxCalib.
//
//	This implements an interface for the Dedx calibration calibration
//
// Environment:
//	Software developed for the BaBar Detector at the SLAC B-Factory.
//
// Author List:
//	Fergus Wilson           02-FEB-1999
//
// Changes:
//      Jean Roy     7-JAN-2000
//         Replace the multiple calibration functions by a simgle combined
//         function generated by DchDedxCorrFun.
//	
// Copyright Information:
//	Copyright (C) 1999	University of California, San Diego
//	Copyright (C) 2000	University of Colorado, Boulder
//
//------------------------------------------------------------------------

#ifndef DCHDEDXCALIB_HH
#define DCHDEDXCALIB_HH

#include "PDT/PdtPid.hh"
#include <memory>
#include "boost/shared_ptr.hpp"

//
// Forward declarations
//
class DchCalibFun;   // the virtual class

/**
 * Class for implementing the dE/dx calibration.
 * @author Fergus Wilson
 * @version $id$
 */
class DchDedxCalib 
{
public:
  /**
    * Create a de/dx calibration object
    * @param cFun Overall correction function.
    * @param gainFactor Wire by Wire gain correction factor
    * @param gainFactor Chamber normalisation factor
    */
  typedef boost::shared_ptr<DchCalibFun> DchCalibFunRCPtr;
  DchDedxCalib(double globalGain,
               double gainFactor,
               const DchCalibFunRCPtr& cFun);
  /**
    * deep copy (because of pointers to functions) of object
    * @param rhs DchDedxCalib object to copy.
    */
  DchDedxCalib(const DchDedxCalib &rhs);

  /**
    * Destructor
    */
  virtual ~DchDedxCalib();

  /**
    * Returns the corrected dE/dx value taking into account
    * doca, Entrance Angle, Dip Angle, and z coordinate. A Track
    * is not used to avoid circular dependencies.
    * @return calibrated dE/dx
    * @param digiCharge   Raw charge
    * @param path      Geometric path length (cm)
    * @param doca      Signed Drift Distance (cm) normalised to cell half width
    * @param entranceAngle  Angle Entrance Angle (radians)
    * @param dipAngle  Dip Angle (radians)
    * @param z         Z Coordinate (cm)
    * @param hypo      Particle Type
    */
  double dedx(double digiCharge, double path,  double doca=0,
               double entranceAngle=0, double dipAngle=0, double z=0,
               PdtPid::PidType hypo=PdtPid::pion) const;

  double calibratedCharge(double digiCharge, double doca=0,
               double entranceAngle=0, double dipAngle=0, double z=0,
               PdtPid::PidType hypo=PdtPid::pion) const;


  double rawCharge(double trueCharge, double doca=0, double entranceAnge=0,
                   double dipAngle=0, double z=0, PdtPid::PidType hypo=PdtPid::pion) const;
  /**
    * Returns the gain correction factor for differences in HV
    * @return Multiplicative gain correction factor
    */
  double gainCorrection() const; // this is global*wire-by-wire
  double globalGainCorrection() const; // this is global

private:
  double _globalGain;
  //  Wire by Wire Gain Factor
  double _gainFactor;
  //  Reference to overall correction function
  DchCalibFunRCPtr _cFun;
  mutable std::auto_ptr<DchCalibFun> _iFun;

  //  Assignment operator
  DchDedxCalib(); // not implemented deliberately
  DchDedxCalib& operator =(const DchDedxCalib&);

};

#endif // DCHDEDXCALIB_HH
